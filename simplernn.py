# -*- coding: utf-8 -*-
"""simpleRNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ggnov9I4scS2AKHbhM6HgMT4PFHNyVWb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

dataset = pd.read_csv("Humanemotional_antecedents.csv")

dataset.head()

dataset.tail()

dataset.shape

dataset.info()

dataset['Field1'].value_counts()

X = dataset.drop('Field1',axis=1)
y = dataset['Field1'] -1

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, stratify=y, random_state=99)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import SimpleRNN
from keras.layers import Dropout

model = Sequential()

model.add(SimpleRNN(units = 50, activation = "tanh", return_sequences = True, input_shape = (X_train.shape[1],1)))
model.add(Dropout(0.2))

model.add(SimpleRNN(units = 50, activation = "tanh", return_sequences = True))
model.add(Dropout(0.2))

model.add(SimpleRNN(units = 50, activation = "tanh", return_sequences = True))
model.add(Dropout(0.2))

model.add(SimpleRNN(units = 50))
model.add(Dropout(0.2))

model.add(Dense(units = 7))

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics='accuracy')

model.summary()

history = model.fit(X_train, y_train, \
                    batch_size = 16, epochs= 50, \
                    verbose=2, validation_split=0.2)

from sklearn.metrics import confusion_matrix, classification_report

y_pred = model.predict(X_test)
y_pred = y_pred.argmax(axis=1)

confusion_matrix = confusion_matrix(y_test,y_pred)

ax = sns.heatmap(confusion_matrix, cmap='flare',annot=True, fmt='d')

plt.xlabel("Predicted Class",fontsize=12)
plt.ylabel("True Class",fontsize=12)
plt.title("Confusion Matrix",fontsize=12)

print(classification_report(y_test,y_pred))

